from dotenv import load_dotenv
import os
from telebot.async_telebot import AsyncTeleBot
from gpt import ChatGptService
from util import on_start_markup, CallBackHandler

#–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

#–°–µ–∫—Ä–µ—Ç—ã

api_key = os.getenv("TELEGRAM_KEY")
secret_key = os.getenv("GPT_KEY")
bot = AsyncTeleBot(api_key)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–º–∞–Ω–¥
@bot.message_handler(commands=['help', 'start', 'stop'])
async def send_welcome(message):
    text = 'Hi, we start here!'
    await bot.send_message(message.chat.id, text, reply_markup=on_start_markup)
    print(message.text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
#–°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
callback_handler = CallBackHandler(bot)


#—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
callback_handler.callback_register('/random', lambda call: bot.send_message(call.message.chat.id, "random"))
callback_handler.callback_register('/start', lambda call: bot.send_message(call.message.chat.id, "start"))
callback_handler.callback_register('/stop', lambda call: bot.send_message(call.message.chat.id, "stop"))
callback_handler.callback_register('/gpt', lambda call: bot.send_message(call.message.chat.id, "gpt"))
callback_handler.callback_register('/quiz', lambda call: bot.send_message(call.message.chat.id, "quiz"))
callback_handler.callback_register('/recipe', lambda call: bot.send_message(call.message.chat.id, "recipe"))
callback_handler.callback_register('/guess', lambda call: bot.send_message(call.message.chat.id, "guess"))
callback_handler.callback_register('/ramzi', lambda call: bot.send_message(call.message.chat.id, "ramzi"))
callback_handler.callback_register('/oliver', lambda call: bot.send_message(call.message.chat.id, "oliver"))
callback_handler.callback_register('/ducas', lambda call: bot.send_message(call.message.chat.id, "ducas"))
callback_handler.callback_register('/bocus', lambda call: bot.send_message(call.message.chat.id, "bocus"))
callback_handler.callback_register('/blumental', lambda call: bot.send_message(call.message.chat.id, "blumental"))
@bot.callback_query_handler(func=lambda call: True)
async def inline(call):
    await callback_handler.handle_callback(call)


# Handle all other messages with content_type 'text' (content_types defaults to ['text'])
@bot.message_handler(func=lambda message: True)
async def echo_message(message):
    await bot.reply_to(message, message.text)


#chat_gpt = ChatGptService(secret_key)

#{
#       'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
#
#  'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
#      'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
#      'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì'
#      # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
# 'command': 'button text'

# })


import asyncio

asyncio.run(bot.polling())
